.. _header-n0:

8. GLground - 3次元データの可視化
=================================

GLgroundでは2次元データと3次元データを高速に可視化するいくつかのメソッドを提供しています.

ここではGLgroundによる3次元データの可視化について説明します.

.. code:: python

   import pgutil
   import numpy as np

   # 空間分割数の指定
   n = 32

   pg = pgutil.GLground()

   # x, y, z座標を表す3次元配列を生成する
   y, x, z = np.meshgrid(np.linspace(0, 2 * np.pi, n), np.linspace(0, 2 * np.pi, n), np.linspace(0, 2 * np.pi, n))


   while pg.run():
       # 描画用3次元配列の生成
       w = np.cos(x + pg.totaltick * 0.01) * np.cos(y + pg.totaltick * 0.02) * np.cos(z + pg.totaltick * 0.03)

       # 0.5より大きい部分を不透明としてマーチングキューブ法により描画
       pg.draw_marching_cubes(w, 0.5)
       # -0.5より小さい部分を不透明としてボクセルデータとして描画
       pg.draw_voxel(w < -0.5)
       # 断面がマウスで動かせるヒートマップとして描画
       pg.draw_tex_cube(w, mouse=True)

上の例は3次元配列に格納されたデータをマーチングキューブ法,
ボクセル描画と3次元ヒートマップの3つの方法で描画し、それらを重ねるサンプルプログラムです.

GLgroundで提供される3次元データの可視化メソッドの使い方は一部を除いて\ `2次元データの可視化メソッド <tutorial7.html>`__\ と似たものになっていて、これらのメソッドと同様に追加の引数によって描画の条件を変更することができます.

上の例に登場する\ ``GLground.draw_marching_cubes``\ は引数にとった3次元配列をマーチングキューブ法に従って陰影処理のなされた曲面によって描画します.
上の例では第2引数に描画の際のしきい値を指定していますが,
指定がない場合は入力の配列の最大値と最小値の平均がしきい値に設定されます.

``GLground.draw_voxel``\ は引数にとった3次元配列をボクセルとして描画します.
他のメソッドと異なり, 入力には真偽値型の配列が必要なため注意が必要です.

``GLground.draw_tex_cube``\ は引数にとった3次元配列を3次元のヒートマップとして描画します.
上の例では引数での指定によってヒートマップの断面がマウスで操作可能になっていますが,
直方体の頂点の座標を直接指定して描画することも可能です.
