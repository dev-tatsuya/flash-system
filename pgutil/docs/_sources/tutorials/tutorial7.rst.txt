.. _header-n0:

7. GLground - 2次元データの可視化
=================================

GLgroundでは2次元データと3次元データを高速に可視化するいくつかのメソッドを提供しています.

ここではGLgroundによる2次元データの可視化について説明します.

.. code:: python

   import pgutil
   import numpy as np

   pg = pgutil.GLground()

   # 描画される線の太さを太くする
   pg.set_line_width(3)

   # x, y座標を表す2次元配列を生成する
   y, x = np.meshgrid(np.linspace(0, 4 * np.pi, 128), np.linspace(0, 4 * np.pi, 128))

   while pg.run():
       # 描画用2次元配列の生成
       z = np.cos(x + pg.totaltick * 0.01) * np.sin(y + pg.totaltick * 0.02)

       # 2次元配列を色付きのメッシュで描画
       pg.draw_mesh_colored(z)
       # 2次元配列を陰影処理のなされた平面で描画
       pg.draw_surface(z)

上の例は2次元配列に格納されたデータを色付きメッシュと陰影処理のなされた曲面の2つの方法で描画し、それらを重ねたものになります.
上の例に示した2つに限らず,
GLgroundでは描画用の関数を複数回呼び出すことで任意の数のデータを一度に重ねて描画することができます.

GLgroundで提供される2次元データの可視化メソッドは基本的に\ `Playgroundで提供される2次元データの可視化メソッド <tutorial5.html>`__\ と似たものになっていて、これらのメソッドと同様に追加の引数によって描画の条件を変更することができます.

上の例に登場する\ ``GLground.draw_mesh_colored``\ は引数にとった2次元配列を色付きのメッシュで描画します.
デフォルトではmatplotlibの\ ``"gist_rainbow_r"``\ のカラーマップが使用されますが,
引数で変更が可能です.

``GLground.draw_surface``\ は引数にとった2次元配列を陰影処理のなされた曲面によって描画します.

他にも\ ``GLground.draw_mesh``\ というメッシュデータを単一の色で描画するメソッドが存在します.
それぞれの関数についての詳しい説明は\ `GLground
リファレンス <../pgutil.html#pgutil.core.GLground>`__\ を確認してください.
